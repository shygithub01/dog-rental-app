import React, { useState, useRef, useEffect } from "react";
import { Routes, Route, useNavigate, useLocation } from "react-router-dom";
import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import "./App.css";
import { useFirebase } from "./contexts/FirebaseContext";
import { useUserService } from "./services/userService";
import { useMessageService } from "./services/messageService";
import { useNotificationService } from "./services/notificationService";
import { useIsMobile } from "./hooks/useIsMobile";
import { doc, updateDoc, collection, getDocs, query, where, getDoc, setDoc, serverTimestamp } from "firebase/firestore";
import { GoogleAuthProvider, signInWithPopup } from "firebase/auth";
import { cleanupOrphanedData, clearAllData } from "./utils/dataCleanup";
import AdminRoute from "./components/Admin/AdminRoute";

import AddDogForm from "./components/Dogs/AddDogForm";
import DogCard from "./components/Dogs/DogCard";
import EditDogForm from "./components/Dogs/EditDogForm";
import RentalRequestForm from "./components/Rentals/RentalRequestForm";
import RentalApprovalPanel from "./components/Rentals/RentalApprovalPanel";
import RenterPendingRequests from "./components/Rentals/RenterPendingRequests";
import NotificationBell from "./components/Notifications/NotificationBell";
import OwnerDogManagement from "./components/Dogs/OwnerDogManagement";
import UserProfile from "./components/User/UserProfile";
import FavoritesModal from "./components/User/FavoritesModal";
import MessagingCenter from "./components/Messaging/MessagingCenter";
import MapsView from "./components/Maps/MapsView";
import FindDogsNearYou from "./components/Maps/FindDogsNearYou";
import OwnerDashboard from "./components/Dashboard/OwnerDashboard";
import RenterDashboard from "./components/Dashboard/RenterDashboard";
import HybridDashboard from "./components/Dashboard/HybridDashboard";
import AdminDashboard from "./components/Admin/AdminDashboard";
import EarningsReport from "./components/Dashboard/EarningsReport";
import SearchPage from "./components/Search/SearchPage";
import { FirebaseProvider } from "./contexts/FirebaseContext";

function AppContent() {
  const isMobile = useIsMobile();
  const [user, setUser] = useState<any>(null);
  const [showAddDog, setShowAddDog] = useState(false);
  const [showOwnerDogManagement, setShowOwnerDogManagement] = useState(false);
  const [showEditDog, setShowEditDog] = useState(false);
  const [showRentDog, setShowRentDog] = useState(false);
  const [showApprovalPanel, setShowApprovalPanel] = useState(false);
  const [showRenterPendingRequests, setShowRenterPendingRequests] = useState(false);
  const [showUserProfile, setShowUserProfile] = useState(false);
  const [showFavorites, setShowFavorites] = useState(false);
  const [showMessaging, setShowMessaging] = useState(false);

  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [showEarningsReport, setShowEarningsReport] = useState(false);
  const [showPaymentHistory, setShowPaymentHistory] = useState(false);
  const [showInbox, setShowInbox] = useState(false);
  const [showRoleSwitchModal, setShowRoleSwitchModal] = useState(false);
  const [showSearch, setShowSearch] = useState(false);
  const [userRentals, setUserRentals] = useState<any[]>([]);
  const [ownerEarnings, setOwnerEarnings] = useState<any[]>([]);

  const [editingDog, setEditingDog] = useState<any>(null);
  const [rentingDog, setRentingDog] = useState<any>(null);
  const [dogs, setDogs] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedRole, setSelectedRole] = useState<'renter' | 'owner' | null>(null);
  const [userProfile, setUserProfile] = useState<any>(null);
  const [profileLoading, setProfileLoading] = useState(true);
  const [isAdminUser, setIsAdminUser] = useState(false);
  // Role selection / mismatch management
  const [rolePickerOpen, setRolePickerOpen] = useState(false);
  const [pendingUser, setPendingUser] = useState<any>(null);
  const [roleMismatch, setRoleMismatch] = useState<{ saved: 'owner'|'renter'|'admin'|null, chosen: 'owner'|'renter', user: any } | null>(null);

  const { auth, db } = useFirebase();
  const notificationService = useNotificationService();
  const userService = useUserService();
  const messageService = useMessageService();

  useEffect(() => {
    // Listen for auth state changes
    const unsubscribe = auth.onAuthStateChanged(async (user) => {
      setUser(user)
      setProfileLoading(true)
      
      if (user) {
        
        try {
          // First, load user profile to get their role
          await loadUserProfile(user)
          
          // Then load dogs
          await loadDogsWithUser(user)
          
        } catch (error) {
          console.error('Error loading user data:', error)
        } finally {
          setProfileLoading(false)
        }
      } else {
        // User signed out
        setUserProfile(null)
        setDogs([])
        setProfileLoading(false)
        setSelectedRole(null)
      }
    })

    return () => unsubscribe()
  }, [auth])

  const loadUserProfile = async (currentUser: any) => {
    try {
      const userRef = doc(db, "users", currentUser.uid);
      const userDoc = await getDoc(userRef);

      if (userDoc.exists()) {
        const data = userDoc.data();
        const updatedProfile = { ...data, id: currentUser.uid };
        await updateDoc(userRef, { lastActive: new Date() });
        setUserProfile(updatedProfile);
        
        // Set admin flag early to prevent flash
        if (data.role === 'admin' && data.isAdmin === true) {
          setIsAdminUser(true);
        } else {
          setIsAdminUser(false);
        }
        
        // Create welcome notification only for returning users if they don't have one
        await createWelcomeNotificationIfNeeded(currentUser, false);
        
      } else {
        // Don't create profile yet - wait for role selection
        setUserProfile(null);
      }
    } catch (error) {
      console.error('Error loading user profile:', error);
    }
  };

  const createUserProfileWithRole = async (currentUser: any, role: 'renter' | 'owner') => {
    try {
      const userRef = doc(db, 'users', currentUser.uid);
      
      const newUserProfile = {
        id: currentUser.uid,
        email: currentUser.email,
        displayName: currentUser.displayName,
        photoURL: currentUser.photoURL,
        role: role,
        isAdmin: false, // Default to false, can be manually set in database
        joinDate: new Date(),
        lastActive: new Date(),
        isVerified: false,
        rating: 0,
        totalReviews: 0,
        totalRentals: 0,
        totalEarnings: 0,
        preferences: {
          emailNotifications: true,
          pushNotifications: true,
          rentalRequests: true,
          rentalUpdates: true,
          reminders: true,
          systemUpdates: true,
          maxRentalDistance: 25,
          preferredDogSizes: ['small', 'medium', 'large'],
          preferredBreeds: []
        },
        stats: {
          dogsOwned: 0,
          dogsRented: 0,
          totalRentals: 0,
          completedRentals: 0,
          cancelledRentals: 0,
          averageRating: 0,
          totalEarnings: 0,
          totalSpent: 0,
          memberSince: new Date(),
          lastRentalDate: null
        }
      };

      await setDoc(userRef, newUserProfile);
      setUserProfile(newUserProfile);
      
      // Create welcome notification for new users
      await createWelcomeNotificationIfNeeded(currentUser, true);
    } catch (error) {
      console.error('Error creating user profile:', error);
      throw error;
    }
  };

  const createWelcomeNotificationIfNeeded = async (currentUser: any, isNewUser: boolean) => {
    try {
      if (isNewUser) {
        // Only create welcome notification for new users
        await notificationService.createNotification(
          currentUser.uid,
          'welcome',
          {
            title: 'Welcome to DogRental!',
            message: `Welcome ${currentUser.displayName || currentUser.email}! You can now browse dogs, add your own dogs for rent, and start connecting with other dog lovers in your community.`,
            data: {
              userId: currentUser.uid,
              userName: currentUser.displayName || currentUser.email
            }
          }
        );
      } else {
        // Remove any duplicate welcome notifications for existing users
        await notificationService.removeDuplicateWelcomeNotifications(currentUser.uid);
      }
    } catch (error) {
      console.error('Error handling welcome notification:', error);
    }
  };

  // Fetch user rentals when Payment History modal is opened
  useEffect(() => {
    if (showPaymentHistory && user?.uid) {
      const fetchUserRentals = async () => {
        try {
          const rentalsQuery = query(
            collection(db, 'rentals'),
            where('renterId', '==', user.uid)
          );
          const rentalsSnapshot = await getDocs(rentalsQuery);
          const rentals = rentalsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }));
          setUserRentals(rentals);
        } catch (error) {
          console.error('Error fetching user rentals:', error);
        }
      };
      
      fetchUserRentals();
    }
  }, [showPaymentHistory, user?.uid, db]);

  // Fetch owner earnings when Earnings Report modal is opened
  useEffect(() => {
    if (showEarningsReport && user?.uid) {
      const fetchOwnerEarnings = async () => {
        try {
          // Fetch rentals where the current user is the owner
          const earningsQuery = query(
            collection(db, 'rentals'),
            where('dogOwnerId', '==', user.uid)
          );
          const earningsSnapshot = await getDocs(earningsQuery);
          const earnings = earningsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }));
          setOwnerEarnings(earnings);
        } catch (error) {
          console.error('Error fetching owner earnings:', error);
        }
      };
      
      fetchOwnerEarnings();
    }
  }, [showEarningsReport, user?.uid, db]);

  const loadDogsWithUser = async (currentUser: any) => {
    if (!currentUser) {
      return
    }
    
    setLoading(true)
    
    try {
      const querySnapshot = await getDocs(collection(db, 'dogs'))
      
      const allDogs = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      
      setDogs(allDogs)
      
    } catch (error) {
      console.error('Error loading dogs:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadDogs = async () => {
    if (!user) {
      return
    }
    
    setLoading(true)
    
    try {
      const querySnapshot = await getDocs(collection(db, 'dogs'))
      
      const allDogs = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      
      setDogs(allDogs)
      
    } catch (error) {
      console.error('Error loading dogs:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleAddDogSuccess = () => {
    setShowAddDog(false)
    loadDogs()
  }

  const handleEditDog = (dog: any) => {
    setEditingDog(dog)
    setShowEditDog(true)
  }

  const handleEditDogSuccess = () => {
    setShowEditDog(false)
    setEditingDog(null)
    loadDogs()
  }

  const handleDeleteDog = () => {
    loadDogs()
  }

  const handleRentDog = (dog: any) => {
    setRentingDog(dog)
    setShowRentDog(true)
  }

  const handleMessageDogOwner = async (dog: any) => {
    if (!user) return;
    
    try {
      // Check if conversation already exists for this specific dog
      const conversationExists = await messageService.conversationExists(user.uid, dog.ownerId, dog.id);
      
      if (!conversationExists) {
        // Send initial message
        await messageService.sendMessage(
          user.uid, 
          user.displayName || user.email || 'Unknown',
          {
            receiverId: dog.ownerId,
            receiverName: dog.ownerName,
            content: `Hi! I'm interested in renting ${dog.name}. Can you tell me more about availability and special requirements?`,
            dogId: dog.id,
            dogName: dog.name,
            rentalId: undefined
          }
        );
      }
      
      // Create notification for the dog owner (for all messages, not just new conversations)
      await notificationService.createNotification(
        dog.ownerId,
        'rental_request',
        {
          title: `New Message about ${dog.name}`,
          message: `${user.displayName || user.email || 'Unknown'} sent you a message about ${dog.name}`,
          data: {
            senderId: user.uid,
            senderName: user.displayName || user.email || 'Unknown',
            dogId: dog.id,
            dogName: dog.name
          }
        }
      );
      
      // Open messaging center
      setShowMessaging(true);
    } catch (error) {
      console.error('Error starting conversation:', error);
    }
  };

  const handleRentDogSuccess = () => {
    setShowRentDog(false)
    setRentingDog(null)
    loadDogsWithUser(user)
  }

  const handleDataCleanup = async () => {
    try {
      const cleanedCount = await cleanupOrphanedData(db);
      alert(`Data cleanup complete! Removed ${cleanedCount} orphaned requests.`);
      loadDogsWithUser(user);
    } catch (error) {
      console.error('Error during cleanup:', error);
      alert('Error during data cleanup. Please try again.');
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      if (result.user) {
        await loadUserProfile(result.user);
      }
    } catch (error) {
      console.error('Error signing in with Google:', error);
      alert('Failed to sign in with Google. Please try again.');
    }
  };

  const confirmSwitchRole = async () => {
    if (!roleMismatch) return;
    const { user, chosen } = roleMismatch as any;
    const uref = doc(db, 'users', user.uid);
    await updateDoc(uref, { role: chosen, lastActive: new Date() });
    const updated = await getDoc(uref);
    setUserProfile({ ...updated.data(), id: user.uid });
    setRoleMismatch(null);
  };

  const cancelSwitchRole = () => {
    if (!roleMismatch) return;
    // Continue with saved role
    const { user, saved } = roleMismatch as any;
    setUserProfile((prev: any) => ({ ...(prev || {}), id: user.uid, role: saved }));
    setRoleMismatch(null);
  };

  const handleUserDropdownToggle = () => {
    setShowUserDropdown(!showUserDropdown);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.user-dropdown-container')) {
        setShowUserDropdown(false);
      }
    };

    if (showUserDropdown) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserDropdown]);

  // Get the effective user role - this is the single source of truth
  const getEffectiveUserRole = () => {
    if (!userProfile) return null;
    
    // Check if user is admin first
    if (userProfile.isAdmin === true && userProfile.role === 'admin') {
      return 'admin';
    }
    
    // Return the role from profile
    return userProfile.role ?? null;
  };

  const effectiveUserRole = getEffectiveUserRole();

  // Show loading while profile is being loaded
  if (user && profileLoading) {
    return (
      <div style={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(135deg, #FF6B35 0%, #FF8E53 100%)'
      }}>
        <div style={{
          background: 'white',
          padding: '40px',
          borderRadius: '20px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
        }}>
          <div style={{
            width: '50px',
            height: '50px',
            border: '4px solid #e2e8f0',
            borderTop: '4px solid #FF6B35',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 20px'
          }}></div>
          <h3 style={{ margin: '0 0 10px 0', color: '#2d3748' }}>
            {isAdminUser ? '🚀 Loading Admin Dashboard...' : 'Loading your profile...'}
          </h3>
          <p style={{ margin: 0, color: '#4a5568' }}>
            {isAdminUser 
              ? 'Preparing enterprise admin tools...' 
              : 'Please wait while we set up your account'
            }
          </p>
        </div>
      </div>
    );
  }

  // Show different forms/panels based on state
  if (showAddDog) {
    return (
      <AddDogForm
        onSuccess={handleAddDogSuccess}
        onCancel={() => setShowAddDog(false)}
      />
    )
  }

  if (showEditDog && editingDog) {
    return (
      <EditDogForm
        dog={editingDog}
        onSuccess={handleEditDogSuccess}
        onCancel={() => {
          setShowEditDog(false)
          setEditingDog(null)
        }}
      />
    )
  }

  if (showRentDog && rentingDog) {
    return (
      <RentalRequestForm
        dog={rentingDog}
        onSuccess={handleRentDogSuccess}
        onClose={() => {
          setShowRentDog(false)
          setRentingDog(null)
        }}
      />
    )
  }
  
  if (showOwnerDogManagement) {
      console.log("Current user UID:", user.uid);
  console.log("Looking for dogs with ownerId:", user.uid);
    return (
      <OwnerDogManagement
        currentUserId={user.uid}
        onEditDog={handleEditDog}
        onAddNewDog={() => setShowAddDog(true)}
        onBack={() => setShowOwnerDogManagement(false)}
      />
    )
  }

  if (showApprovalPanel) {
  return (
    <RentalApprovalPanel
      currentUserId={user.uid}
      onRequestUpdate={() => {
        loadDogsWithUser(user)
      }}
      onClose={() => setShowApprovalPanel(false)}  // Add this line
    />
  )
  }

  if (showRenterPendingRequests) {
  return (
    <RenterPendingRequests
      currentUserId={user.uid}
      onRequestUpdate={() => {
        loadDogsWithUser(user)
      }}
      onClose={() => setShowRenterPendingRequests(false)}
    />
  )
  }  
  if (showUserProfile) {
    return (
      <UserProfile
        userId={user.uid}
        onClose={() => setShowUserProfile(false)}
      />
    )
  }

  if (showFavorites) {
    return (
      <FavoritesModal
        currentUserId={user?.uid || ''}
        onClose={() => setShowFavorites(false)}
        onBrowseDogs={() => {
          setShowFavorites(false);
          setShowSearch(true);
        }}
      />
    )
  }

  if (showMessaging) {
    return (
      <div style={{
        background: 'linear-gradient(135deg, rgba(255, 107, 53, 0.1) 0%, rgba(45, 212, 191, 0.1) 25%, rgba(253, 224, 71, 0.1) 50%, rgba(132, 204, 22, 0.1) 75%, rgba(255, 142, 83, 0.1) 100%), radial-gradient(circle at 20% 20%, rgba(255, 107, 53, 0.15) 0%, transparent 50%), radial-gradient(circle at 80% 80%, rgba(45, 212, 191, 0.15) 0%, transparent 50%), radial-gradient(circle at 40% 60%, rgba(253, 224, 71, 0.1) 0%, transparent 30%), radial-gradient(circle at 70% 30%, rgba(132, 204, 22, 0.1) 0%, transparent 30%), #FAFAF9',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '40px 20px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <MessagingCenter
          currentUserId={user?.uid || ''}
          currentUserName={user?.displayName || user?.email || ''}
          onClose={() => setShowMessaging(false)}
        />
      </div>
    )
  }



  if (showSearch) {
    return (
      <SearchPage
        onDogSelect={(dog) => {
          // Handle dog selection - could show details modal
          setShowSearch(false);
        }}
        onRentDog={handleRentDog}
        onMessageOwner={handleMessageDogOwner}
        onBack={() => setShowSearch(false)}
      />
    )
  }

  if (showEarningsReport) {
    return (
      <EarningsReport 
        ownerEarnings={ownerEarnings}
        onClose={() => setShowEarningsReport(false)}
      />
    )
  }

  if (showPaymentHistory) {
    return (
      <div className="dashboard-section" style={{
        background: 'linear-gradient(135deg, rgba(255, 107, 53, 0.1) 0%, rgba(45, 212, 191, 0.1) 25%, rgba(253, 224, 71, 0.1) 50%, rgba(132, 204, 22, 0.1) 75%, rgba(255, 142, 83, 0.1) 100%), radial-gradient(circle at 20% 20%, rgba(255, 107, 53, 0.15) 0%, transparent 50%), radial-gradient(circle at 80% 80%, rgba(45, 212, 191, 0.15) 0%, transparent 50%), radial-gradient(circle at 40% 60%, rgba(253, 224, 71, 0.1) 0%, transparent 30%), radial-gradient(circle at 70% 30%, rgba(132, 204, 22, 0.1) 0%, transparent 30%), #FAFAF9',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '40px 20px'
      }}>
        <div className="section-container">
          <div className="card card-elevated" style={{ 
            maxWidth: '1000px', 
            width: '90%',
            margin: '0 auto',
            background: '#ffffff',
            borderRadius: '20px',
            boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{
              textAlign: 'center',
              marginBottom: '40px',
              paddingBottom: '24px',
              borderBottom: '1px solid #f1f5f9'
            }}>
              <div style={{ fontSize: '3rem', marginBottom: '16px' }}>💳</div>
              <h2 className="section-title" style={{ marginBottom: '8px' }}>
                Payment History
              </h2>
              <p className="section-subtitle" style={{ margin: 0 }}>
                Your complete rental payment history and expense overview
              </p>
            </div>

            <div className="flex justify-center mb-8">
              <button
                onClick={() => setShowPaymentHistory(false)}
                className="btn-glass"
              >
                {isMobile ? '←' : '← Back to Dashboard'}
              </button>
            </div>

            {/* Payment History Content */}
            <div style={{ padding: '0 24px 24px 24px' }}>
              {userRentals.length === 0 ? (
                <div style={{ 
                  textAlign: 'center', 
                  padding: '60px 20px',
                  color: '#64748b'
                }}>
                  <div style={{ fontSize: '4rem', marginBottom: '20px' }}>💳</div>
                  <h3 style={{ 
                    fontSize: '1.5rem', 
                    marginBottom: '12px', 
                    color: '#1e293b' 
                  }}>
                    No Payment History Yet
                  </h3>
                  <p style={{ margin: 0, fontSize: '1rem' }}>
                    Start renting dogs to see your payment history here.
                  </p>
                </div>
              ) : (
                <>
                  {/* Payment Summary */}
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                    gap: '20px',
                    marginBottom: '32px'
                  }}>
                    <div style={{
                      background: 'linear-gradient(135deg, #FF6B35 0%, #FF8E53 100%)',
                      color: 'white',
                      padding: '24px',
                      borderRadius: '16px',
                      textAlign: 'center',
                      boxShadow: '0 8px 32px rgba(255, 107, 53, 0.3)'
                    }}>
                      <div style={{ fontSize: '2rem', marginBottom: '8px' }}>💳</div>
                      <div style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '4px' }}>
                        ${userRentals.reduce((sum, rental) => sum + (rental.totalCost || 0), 0)}
                      </div>
                      <div style={{ fontSize: '0.9rem', opacity: 0.9 }}>Total Paid</div>
                    </div>
                    
                    <div style={{
                      background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                      color: 'white',
                      padding: '24px',
                      borderRadius: '16px',
                      textAlign: 'center',
                      boxShadow: '0 8px 32px rgba(16, 185, 129, 0.3)'
                    }}>
                      <div style={{ fontSize: '2rem', marginBottom: '8px' }}>📊</div>
                      <div style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '4px' }}>
                        {userRentals.length}
                      </div>
                      <div style={{ fontSize: '0.9rem', opacity: 0.9 }}>Total Rentals</div>
                    </div>

                    <div style={{
                      background: 'linear-gradient(135deg, #F59E0B 0%, #D97706 100%)',
                      color: 'white',
                      padding: '24px',
                      borderRadius: '16px',
                      textAlign: 'center',
                      boxShadow: '0 8px 32px rgba(245, 158, 11, 0.3)'
                    }}>
                      <div style={{ fontSize: '2rem', marginBottom: '8px' }}>📅</div>
                      <div style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '4px' }}>
                        {userRentals.filter(r => r.status === 'completed').length}
                      </div>
                      <div style={{ fontSize: '0.9rem', opacity: 0.9 }}>Completed</div>
                    </div>
                  </div>

                  {/* Payment History List */}
                  <div style={{
                    background: 'rgba(249, 250, 251, 0.8)',
                    border: '1px solid rgba(229, 231, 235, 0.5)',
                    borderRadius: '12px',
                    padding: '24px'
                  }}>
                    <h4 style={{
                      margin: '0 0 20px 0',
                      fontSize: '1.25rem',
                      color: '#1f2937',
                      fontWeight: '600'
                    }}>
                      💳 Payment Details
                    </h4>
                    
                    <div style={{ display: 'grid', gap: '16px' }}>
                      {userRentals
                        .sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime())
                        .map((rental, index) => (
                        <div key={rental.id || index} style={{
                          background: 'white',
                          padding: '20px',
                          borderRadius: '12px',
                          border: '1px solid rgba(229, 231, 235, 0.5)',
                          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.05)'
                        }}>
                          <div style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'flex-start',
                            marginBottom: '12px'
                          }}>
                            <div>
                              <div style={{ 
                                fontWeight: '600', 
                                color: '#1f2937', 
                                fontSize: '1.1rem',
                                marginBottom: '4px' 
                              }}>
                                🐕 {rental.dogName} ({rental.dogBreed})
                              </div>
                              <div style={{ fontSize: '0.9rem', color: '#6b7280' }}>
                                Owner: {rental.dogOwnerName || 'Unknown'}
                              </div>
                            </div>
                            <div style={{ textAlign: 'right' }}>
                              <div style={{ 
                                fontWeight: 'bold', 
                                color: '#059669', 
                                fontSize: '1.25rem',
                                marginBottom: '4px' 
                              }}>
                                ${rental.totalCost || 0}
                              </div>
                              <div style={{
                                fontSize: '0.8rem',
                                padding: '4px 8px',
                                borderRadius: '12px',
                                display: 'inline-block',
                                backgroundColor: rental.status === 'completed' ? '#d1fae5' : 
                                               rental.status === 'active' ? '#fef3c7' : '#fee2e2',
                                color: rental.status === 'completed' ? '#065f46' : 
                                       rental.status === 'active' ? '#92400e' : '#991b1b'
                              }}>
                                {rental.status.charAt(0).toUpperCase() + rental.status.slice(1)}
                              </div>
                            </div>
                          </div>
                          
                          <div style={{
                            display: 'grid',
                            gridTemplateColumns: '1fr 1fr',
                            gap: '16px',
                            fontSize: '0.9rem',
                            color: '#6b7280',
                            borderTop: '1px solid rgba(229, 231, 235, 0.5)',
                            paddingTop: '12px'
                          }}>
                            <div>
                              <span style={{ fontWeight: '600', color: '#374151' }}>Start Date:</span><br/>
                              {new Date(rental.startDate).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                              })}
                            </div>
                            <div>
                              <span style={{ fontWeight: '600', color: '#374151' }}>End Date:</span><br/>
                              {new Date(rental.endDate).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                              })}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div style={{ minHeight: '100vh', background: 'white' }}>
      {/* Modern Header */}
      <header className="modern-header fade-in">
        <div className="header-content">
          <div style={{ display: 'flex', alignItems: 'center', gap: '32px' }}>
            <a href="#" className="logo">
              DogRental
            </a>
          </div>

          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            {user ? (
              <>
                <NotificationBell userId={user.uid} />
                
                {/* User Dropdown */}
                <div className="user-dropdown-container">
                  <button
                    onClick={handleUserDropdownToggle}
                    className={`user-dropdown-trigger ${showUserDropdown ? 'open' : ''}`}
                  >
                    <div className="user-avatar">
                      {user.photoURL ? (
                        <img src={user.photoURL} alt="Profile" />
                      ) : (
                        user.displayName?.charAt(0) || user.email?.charAt(0) || 'U'
                      )}
                    </div>
                    <span className="user-name">
                      {user.displayName || user.email}
                    </span>
                    <span className="dropdown-arrow">▼</span>
                  </button>
                  
                  {/* Dropdown Menu */}
                  {showUserDropdown && (
                    <div className="user-dropdown-menu slide-up">
                      <button
                        onClick={() => {
                          setShowUserProfile(true);
                          setShowUserDropdown(false);
                        }}
                        className="dropdown-item"
                      >
                        Profile
                      </button>
                      
                      {/* Role-specific Financial Reports */}
                      {(() => {
                        if (effectiveUserRole === 'owner') {
                          return (
                            <button
                              onClick={() => {
                                setShowEarningsReport(true);
                                setShowUserDropdown(false);
                              }}
                              className="dropdown-item"
                            >
                              Earnings Report
                            </button>
                          );
                        } else if (effectiveUserRole === 'renter') {
                          return (
                            <button
                              onClick={() => {
                                setShowPaymentHistory(true);
                                setShowUserDropdown(false);
                              }}
                              className="dropdown-item"
                            >
                              Payment History
                            </button>
                          );
                        }
                        return null;
                      })()}
                      
                      {/* Admin Access - Only for admin users */}
                      {effectiveUserRole === 'admin' && (
                        <button
                          onClick={() => {
                            window.location.href = '/admin';
                            setShowUserDropdown(false);
                          }}
                          className="dropdown-item"
                          style={{ color: '#e53e3e', fontWeight: 'bold' }}
                        >
                          Admin Panel
                        </button>
                      )}

                      {/* Clear All Data Button - Fresh Start */}
                      <button
                        onClick={async () => {
                          if (confirm('WARNING: This will delete ALL data and start fresh. Are you sure?')) {
                            try {
                              await clearAllData(db);
                              setShowUserDropdown(false);
                            } catch (error) {
                              console.error('Error clearing data:', error);
                              alert('Error clearing data: ' + error);
                            }
                          }
                        }}
                        className="dropdown-item"
                        style={{ color: '#e53e3e', fontWeight: 'bold' }}
                      >
                        Clear All Data (Fresh Start)
                      </button>
                      
                      <button
                        onClick={() => {
                          setShowMessaging(true);
                          setShowUserDropdown(false);
                        }}
                        className="dropdown-item"
                      >
                        Inbox
                      </button>
                      
                      <button
                        onClick={() => {
                          setShowSearch(true);
                          setShowUserDropdown(false);
                        }}
                        className="dropdown-item"
                      >
                        Maps
                      </button>

                      <div className="dropdown-divider" />
                      
                      {/* Hide Switch Role for admin users */}
                      {effectiveUserRole !== 'admin' && (
                      <button
                        onClick={() => {
                          setShowRoleSwitchModal(true);
                          setShowUserDropdown(false);
                        }}
                        className="dropdown-item"
                      >
                        Switch Role
                      </button>
                      )}
                      
                      <button
                        onClick={() => {
                          auth.signOut();
                          setShowUserDropdown(false);
                          setSelectedRole(null);
                          setUserProfile(null);
                          setDogs([]);
                          setShowAddDog(false);
                          setShowEditDog(false);
                          setShowRentDog(false);
                          setShowApprovalPanel(false);
                          setShowRenterPendingRequests(false);
                          setShowUserProfile(false);
                          setShowFavorites(false);
                          setShowMessaging(false);
                          setShowSearch(false);
                          setShowEarningsReport(false);
                          setShowPaymentHistory(false);
                        }}
                        className="dropdown-item danger"
                      >
                        Sign Out
                      </button>
                    </div>
                  )}
                </div>
              </>
            ) : null}
          </div>
        </div>
      </header>

      {roleMismatch && (
        <div className="modal-backdrop">
          <div className="modal-card">
            <h3>Role mismatch</h3>
            <p>
              Your account is registered as <b>{roleMismatch.saved}</b>, but you selected <b>{roleMismatch.chosen}</b>.
            </p>
            <div className="modal-actions">
              <button onClick={cancelSwitchRole}>Continue as {roleMismatch.saved}</button>
              <button onClick={confirmSwitchRole}>Switch to {roleMismatch.chosen}</button>
            </div>
          </div>
        </div>
      )}

      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-content fade-in">
          {/* Hero Text */}
          <div className="hero-text">
            <h1 className="hero-title">
              Loving dog companions for every moment
            </h1>
            <p className="hero-subtitle">
              Book trusted dogs for walks, companionship, and adventures. Perfect for busy days or when you need a furry friend.
            </p>
            
            {user ? (
              <div className="hero-stats">
                <div className="hero-stat">
                  <div className="hero-stat-number">
                    {loading ? <span className="loading-spinner"></span> : dogs.filter(dog => dog.isAvailable).length}
                  </div>
                  <div className="hero-stat-label">Available Dogs</div>
                </div>
                <div className="hero-stat">
                  <div className="hero-stat-number">100+</div>
                  <div className="hero-stat-label">Trusted by pet lovers</div>
                </div>
                <div className="hero-stat">
                  <div className="hero-stat-number">24/7</div>
                  <div className="hero-stat-label">Support available</div>
                </div>
              </div>
            ) : (
              <div className="hero-stats">
                <div 
                  className="hero-stat"
                  onClick={handleGoogleSignIn}
                  style={{
                    cursor: 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(255, 107, 53, 0.2)';
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  <div className="hero-stat-number">🔐</div>
                  <div className="hero-stat-label">Sign in to start</div>
                </div>
                <div className="hero-stat">
                  <div className="hero-stat-number">100+</div>
                  <div className="hero-stat-label">Pet lovers waiting</div>
                </div>
              </div>
            )}
          </div>

          {/* Search/Action Card - Consolidated */}
          <div className="search-card slide-up">
            {!user ? (
              // Not logged in - show beautiful landing page
              <>
                <h3 className="search-title">
                  Join DogRental today
                </h3>
                <p className="search-subtitle">
                  Sign in to start renting dogs or list your dogs for rent
                </p>
                
                <button
                  onClick={handleGoogleSignIn}
                  className="btn btn-google btn-lg"
                  style={{ marginTop: 'var(--space-6)' }}
                >
                  <svg width="20" height="20" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  Sign in with Google
                </button>
              </>
            ) : user && !userProfile ? (
              // User is logged in but no profile yet - show role selection
              <>
                <h3 className="search-title">
                  Choose Your Role
                </h3>
                <p className="search-subtitle">
                  How would you like to use DogRental?
                </p>
                
                <div className="role-selection">
                  <div className="role-options">
                    <button
                      onClick={() => setSelectedRole('renter')}
                      className={`role-option ${selectedRole === 'renter' ? 'selected' : ''}`}
                    >
                      <span className="role-option-icon">🐾</span>
                      <span className="role-option-text">Rent dogs from others</span>
                    </button>
                    
                    <button
                      onClick={() => setSelectedRole('owner')}
                      className={`role-option ${selectedRole === 'owner' ? 'selected' : ''}`}
                    >
                      <span className="role-option-icon">🏠</span>
                      <span className="role-option-text">List my dogs for rent</span>
                    </button>
                  </div>
                  
                  <button
                    onClick={async () => {
                      if (selectedRole && user) {
                        try {
                          await createUserProfileWithRole(user, selectedRole);
                        } catch (error) {
                          console.error('Error creating user profile:', error);
                        }
                      }
                    }}
                    disabled={!selectedRole}
                    className={`btn btn-success btn-lg ${!selectedRole ? 'loading' : ''}`}
                    style={{ marginTop: 'var(--space-6)' }}
                  >
                    Continue with {selectedRole === 'renter' ? 'Renting' : selectedRole === 'owner' ? 'Hosting' : 'Role Selection'}
                  </button>
                </div>
              </>
            ) : user && userProfile ? (
              <>
                {(() => {
                  if (effectiveUserRole === 'admin') {
                    return (
                      <>
                        <h3 className="search-title">
                          Admin Control Center
                        </h3>
                        <p className="search-subtitle">
                          Manage users, resolve issues, and monitor system health
                        </p>
                      </>
                    );
                  }
                  
                  if (effectiveUserRole === 'owner') {
                    return (
                      <>
                        <h3 className="search-title">
                          Your dogs are ready to make new friends
                        </h3>
                        <p className="search-subtitle">
                          Manage your listings and create happy memories for dog lovers
                        </p>
                      </>
                    );
                  } else if (effectiveUserRole === 'renter') {
                    return (
                      <>
                        <h3 className="search-title">
                          Find Your Furry Soulmate
                        </h3>
                        <p className="search-subtitle">
                          Discover amazing dogs ready to be your perfect adventure buddy
                        </p>
                      </>
                    );
                  }
                })()}
                
                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', marginBottom: '24px' }}>
                  {/* Role-specific actions */}
                  {(() => {
                    // Admin users get admin-specific actions
                    if (effectiveUserRole === 'admin') {
                      return (
                        <>
                          <button
                            onClick={() => {
                              window.location.href = '/admin';
                            }}
                            className="btn-glass-primary w-full mb-4"
                          >
                            Admin Dashboard
                          </button>
                          <button
                            onClick={() => setShowUserProfile(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            User Management
                          </button>
                          <button
                            onClick={() => setShowMessaging(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            Support Chat
                          </button>
                        </>
                      );
                    }
                    
                    if (effectiveUserRole === 'owner') {
                      // OWNER ACTIONS
                      return (
                        <>
                          <button
                            onClick={() => setShowOwnerDogManagement(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            Manage Dogs
                          </button>
                          <button
                            onClick={() => setShowApprovalPanel(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            My Requests
                          </button>
                        </>
                      );
                    } else if (effectiveUserRole === 'renter') {
                      // RENTER ACTIONS
                      return (
                        <>
                          <button
                            onClick={() => setShowSearch(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            🔍 Find Dogs
                          </button>
                          <button
                            onClick={() => setShowUserProfile(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            My Rentals
                          </button>
                          <button
                            onClick={() => setShowFavorites(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            Favorites
                          </button>
                          <button
                            onClick={() => setShowRenterPendingRequests(true)}
                            className="btn-glass-primary w-full mb-4"
                          >
                            Pending Requests
                          </button>
                        </>
                      );
                    }
                    return null;
                  })()}
                  
                  <button
                    onClick={handleDataCleanup}
                    className="btn-glass-primary w-full mb-4"
                  >
                    Clean Data
                  </button>
                </div>
              </>
            ) : null}
          </div>
        </div>
      </section>

      {/* Role-Based Dashboard Content */}
      {user && userProfile && (
        <>
          {(() => {
            // Admin check first - immediate render if admin
            if (userProfile.role === 'admin' && userProfile.isAdmin === true) {
              return (
                <AdminDashboard
                  onClose={() => {
                    auth.signOut();
                  }}
                />
              );
            } else if (effectiveUserRole === 'owner') {
              return null;
            } else if (effectiveUserRole === 'renter') {
              return (
                <div className="fade-in">
                  <RenterDashboard
                    dogs={dogs}
                    onViewMyRentals={() => setShowUserProfile(true)}
                    onViewFavorites={() => setShowFavorites(true)}
                    onRentDog={handleRentDog}
                    onMessageDogOwner={handleMessageDogOwner}
                    onViewPendingRequests={() => setShowRenterPendingRequests(true)}
                    user={userProfile}
                  />
                </div>
              );
            }
            return null;
          })()}
        </>
      )}





      {/* Dog Listings Section - Only show for non-logged in users */}
      {dogs.length > 0 && !userProfile && (
        <section className="dashboard-section">
          <div className="section-container">
            <div className="section-header">
              <h2 className="section-title">Available Dogs</h2>
              <p className="section-subtitle">
                Discover amazing dogs ready for their next adventure
              </p>
            </div>
            
            <div className="dogs-grid fade-in">
              {dogs.slice(0, 6).map((dog) => (
                <div key={dog.id} className="slide-up">
                  <DogCard
                    dog={dog}
                    onEdit={handleEditDog}
                    onDelete={handleDeleteDog}
                    onRent={handleRentDog}
                    onMessage={handleMessageDogOwner}
                    currentUserId={user?.uid}
                  />
                </div>
              ))}
            </div>
            
            {dogs.length > 6 && (
              <div style={{ textAlign: 'center', marginTop: '40px' }}>
                <button
                  onClick={() => setShowSearch(true)}
                  className="btn-primary"
                >
                  View All Dogs
                </button>
              </div>
            )}
          </div>
        </section>
      )}

      {/* Services Section - Show on landing page */}
      <section className="dashboard-section" style={{ background: '#f8fafc' }}>
        <div className="section-container">
          <div className="section-header">
            <h2 className="section-title">Our Services</h2>
            <p className="section-subtitle">
              Discover the perfect way to connect with dogs in your neighborhood
            </p>
          </div>
          
          <div className="services-grid">
            {/* Dog Rental */}
            <div className="service-card slide-up">
              <span className="service-icon">🐕</span>
              <h3 className="service-title">Dog Rental</h3>
              <p className="service-description">
                Rent trusted dogs for walks, companionship, and adventures. Perfect for busy days or when you need a furry friend.
              </p>
            </div>

            {/* Dog Hosting */}
            <div className="service-card slide-up">
              <span className="service-icon">🏠</span>
              <h3 className="service-title">Dog Hosting</h3>
              <p className="service-description">
                Host dogs in your home when their owners are away. Provide a loving environment and earn extra income.
              </p>
            </div>

            {/* Dog Walking */}
            <div className="service-card slide-up">
              <span className="service-icon">🚶</span>
              <h3 className="service-title">Dog Walking</h3>
              <p className="service-description">
                Professional dog walking services for busy pet parents. Regular exercise and outdoor adventures for your furry friends.
              </p>
            </div>

            {/* Dog Day Care */}
            <div className="service-card slide-up">
              <span className="service-icon">🏫</span>
              <h3 className="service-title">Dog Day Care</h3>
              <p className="service-description">
                Safe and fun day care for dogs while you're at work. Socialization, playtime, and supervision in a loving environment.
              </p>
            </div>

            {/* Dog Training */}
            <div className="service-card slide-up">
              <span className="service-icon">🎓</span>
              <h3 className="service-title">Dog Training</h3>
              <p className="service-description">
                Professional training services for obedience, behavior modification, and specialized skills. Build a stronger bond with your dog.
              </p>
            </div>

            {/* Community */}
            <div className="service-card slide-up">
              <span className="service-icon">👥</span>
              <h3 className="service-title">Community</h3>
              <p className="service-description">
                Connect with fellow dog lovers in your neighborhood. Share experiences, tips, and build lasting friendships.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Footer - Only show when user is logged in */}
      {user && userProfile && (
        <div style={{
          background: '#2d3748',
          color: 'white',
          padding: '40px',
          textAlign: 'center'
        }}>
          <div style={{
            maxWidth: '1200px',
            margin: '0 auto'
          }}>
            <h3 style={{
              margin: '0 0 20px 0',
              fontSize: '1.5rem',
              fontWeight: 'bold'
            }}>
              DogRental
            </h3>
            <p style={{
              margin: '0 0 20px 0',
              opacity: 0.8,
              lineHeight: '1.6'
            }}>
              Connecting dog lovers with trusted companions in your neighborhood.
            </p>
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              gap: '30px',
              marginTop: '30px'
            }}>
              <span style={{ opacity: 0.7 }}>© 2024 DogRental</span>
              <span style={{ opacity: 0.7 }}>Privacy Policy</span>
              <span style={{ opacity: 0.7 }}>Terms of Service</span>
            </div>
          </div>
        </div>
      )}
      
{/* Role Switch Modal */}
      {showRoleSwitchModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '30px',
            borderRadius: '15px',
            maxWidth: '400px',
            width: '90%',
            textAlign: 'center',
            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)'
          }}>
            <h3 style={{
              marginBottom: '20px',
              color: '#2d3748',
              fontSize: '1.5rem'
            }}>
              Switch Role
            </h3>
            <p style={{
              marginBottom: '30px',
              color: '#666',
              fontSize: '1rem'
            }}>
              Choose how you want to use DogRental
            </p>
            
            {/* Only show role switching for non-admin users */}
            {effectiveUserRole !== 'admin' && (
              <div style={{ marginBottom: 'var(--space-8)' }}>
                <button
                  onClick={() => {
                    const userRef = doc(db, "users", user.uid);
                    updateDoc(userRef, { role: 'renter' }).then(() => {
                      setUserProfile((prev: any) => ({ ...prev, role: 'renter' }));
                      setShowRoleSwitchModal(false);
                    });
                  }}
                  className="btn btn-success btn-lg"
                  style={{ marginBottom: 'var(--space-3)' }}
                >
                  <span style={{ fontSize: '1.2rem' }}>🐾</span>
                  Continue as Renter
                </button>
                
                <button
                  onClick={() => {
                    const userRef = doc(db, "users", user.uid);
                    updateDoc(userRef, { role: 'owner' }).then(() => {
                      setUserProfile((prev: any) => ({ ...prev, role: 'owner' }));
                      setShowRoleSwitchModal(false);
                    });
                  }}
                  className="btn btn-success btn-lg"
                >
                  <span style={{ fontSize: '1.2rem' }}>🏠</span>
                  Switch to Owner
                </button>
              </div>
            )}
            
            {/* Show message for admin users */}
            {effectiveUserRole === 'admin' && (
              <div style={{ marginBottom: 'var(--space-8)' }}>
                <p style={{ color: '#6B32B0', fontWeight: 'bold' }}>
                  🛡️ Admin accounts cannot switch roles for security reasons.
                </p>
              </div>
            )}
            
            <button
              onClick={() => setShowRoleSwitchModal(false)}
              className="btn"
              style={{
                backgroundColor: 'var(--secondary-200)',
                color: 'var(--secondary-600)',
                fontSize: '0.9rem'
              }}
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  )
}







function App() {
  return (
    <DndProvider backend={HTML5Backend}>
      <FirebaseProvider>
        <Routes>
          <Route path="/admin" element={<AdminRoute />} />
          <Route path="/" element={<AppContent />} />
        </Routes>
      </FirebaseProvider>
    </DndProvider>
  )
}

export default App
